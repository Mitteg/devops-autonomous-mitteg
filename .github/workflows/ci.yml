name: CI Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline lors d'un push sur la branche `main`
  pull_request:
    branches:
      - main  # Déclenche également lors d'une PR vers `main`

jobs:
  build:
    runs-on: ubuntu-latest  # Exécuter sur une machine virtuelle Ubuntu

    steps:
      # 1. Checkout du code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up Python (version 3.13.2 comme spécifié dans ton README)
      - name: Set up Python 3.13.2
        uses: actions/setup-python@v2
        with:
          python-version: '3.13.2'

      # 3. Installation des dépendances et création de l'environnement virtuel
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      # 4. Exécuter Flake8 pour vérifier le code
      - name: Run Flake8
        run: |
          source venv/bin/activate
          flake8 .  # Vérifie l'ensemble du code pour détecter des problèmes de style

      # 5. Exécuter Bandit pour tester la sécurité du code dans `src/app.py`
      - name: Run Bandit security check
        run: |
          source venv/bin/activate
          bandit -r src/app.py --severity-level high  # Affiche uniquement les problèmes graves

      # 6. Si Flake8 et Bandit sont OK, construire l'image Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mon-app:latest .

      # 7. Lancer Docker Scout pour analyser l'image Docker
      - name: Run Docker Scout
        run: |
          docker scout cves ${{ secrets.DOCKER_USERNAME }}/mon-app:latest  # Lancer Docker Scout pour vérifier les vulnérabilités

      # 8. Pousser l'image vers Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/mon-app:latest
